<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAEMAAABrAAAAPwAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAA
        ADcAAAAyAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAAA8wAAAP8AAADxAAAAggAA
        AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABwAAACpAAAA8gAAAO4AAACMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAMgAAAD/AAAA/wAA
        AP8AAAD5AAAAiAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAXAAAArQAAAP8AAAD/AAAA/wAAAPAAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAwQAA
        AP8AAAD/AAAA/wAAAP8AAAD5AAAAgQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEwAAAKUAAAD/AAAA/wAAAP8AAAD/AAAA9wAAAEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AKAAAAD+AAAA+wAAAFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACaAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAC6AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsAAADGAAAA/wAA
        APkAAACGAAAAHAAAAI8AAACoAAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAADWAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADzAAAAmQAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACoAAADFAAAA/wAAAPoAAAB3AAAAAwAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADIAAACiAAAA2QAAAOMAAADSAAAAngAAAEYAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACoAAADEAAAA/wAAAJ4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAUAAAAZAAAAIQAAABQAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAAABjAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////g//8P4H/+B8A//AfAH/gH4A/wB+AH4A/wB8Af+AOAP/wB
        AH/+AAD//wAB///AA///4Af///AA//4AAH/4AAA/8AAAH+ABAA/AAQAHwAEAA8ABAAGAAQABgAOAA4AD
        wA+AB+APwA/wH+Af+D/wf/x///////////8=
</value>
  </data>
</root>